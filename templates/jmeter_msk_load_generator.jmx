<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
    <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="msk_json_load" enabled="true">
            <stringProp name="TestPlan.comments"></stringProp>
            <boolProp name="TestPlan.functional_mode">false</boolProp>
            <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
            <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
            <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="TestPlan.user_define_classpath"></stringProp>
        </TestPlan>
        <hashTree>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ThreadGroup" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">3</stringProp>
                <stringProp name="ThreadGroup.ramp_time">10</stringProp>
                <boolProp name="ThreadGroup.scheduler">false</boolProp>
                <stringProp name="ThreadGroup.duration"></stringProp>
                <stringProp name="ThreadGroup.delay"></stringProp>
                <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
            </ThreadGroup>
            <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="jsonSend" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&#xd;
                                    &quot;records&quot;:[&#xd;
                                    {&#xd;
                                    &quot;value&quot;:{&#xd;
                                    &quot;accountNo&quot;:&quot;254722${__Random(100000,999999)}&quot;,&#xd;
                                    &quot;requestRefId&quot;:&quot;${__UUID()}&quot;,&#xd;
                                    &quot;sourceSystem&quot;:&quot;mysafaricom-android&quot;,&#xd;
                                    &quot;sourceApp&quot;:&quot;${__RandomFromMultipleVars(valMyApp|valMpesa|valFuliza|valOkoa)}&quot;,&#xd;
                                    &quot;transactionsSource&quot;:&quot;${__RandomFromMultipleVars(valBonga|valMpesa|valAirtime|valOkoa|valRetail)}&quot;&#xd;
                                    }&#xd;
                                    }&#xd;
                                    ]&#xd;
                                    }</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">ec2-3-234-223-167.compute-1.amazonaws.com</stringProp>
                    <stringProp name="HTTPSampler.port">8082</stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/topics/TestData0001</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="TestPlan.comments">sends a json payload to the Kafka proxy</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="CustomContentType" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/vnd.kafka.json.v2+json</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">*/*</stringProp>
                            </elementProp>
                        </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="valMpesa" elementType="Argument">
                                <stringProp name="Argument.name">valMpesa</stringProp>
                                <stringProp name="Argument.value">Mpesa</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="valFuliza" elementType="Argument">
                                <stringProp name="Argument.name">valFuliza</stringProp>
                                <stringProp name="Argument.value">Fuliza</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="valRetail" elementType="Argument">
                                <stringProp name="Argument.name">valRetail</stringProp>
                                <stringProp name="Argument.value">Retail</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="valBonga" elementType="Argument">
                                <stringProp name="Argument.name">valBonga</stringProp>
                                <stringProp name="Argument.value">Bonga</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="valOkoa" elementType="Argument">
                                <stringProp name="Argument.name">valOkoa</stringProp>
                                <stringProp name="Argument.value">Okoa</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="valWeb" elementType="Argument">
                                <stringProp name="Argument.name">valWeb</stringProp>
                                <stringProp name="Argument.value">Web</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="valMyApp" elementType="Argument">
                                <stringProp name="Argument.name">valMyApp</stringProp>
                                <stringProp name="Argument.value">myApp</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </Arguments>
                    <hashTree/>
                    <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
                        <boolProp name="ResultCollector.error_logging">false</boolProp>
                        <objProp>
                            <name>saveConfig</name>
                            <value class="SampleSaveConfiguration">
                                <time>true</time>
                                <latency>true</latency>
                                <timestamp>true</timestamp>
                                <success>true</success>
                                <label>true</label>
                                <code>true</code>
                                <message>true</message>
                                <threadName>true</threadName>
                                <dataType>true</dataType>
                                <encoding>false</encoding>
                                <assertions>true</assertions>
                                <subresults>true</subresults>
                                <responseData>false</responseData>
                                <samplerData>false</samplerData>
                                <xml>false</xml>
                                <fieldNames>true</fieldNames>
                                <responseHeaders>false</responseHeaders>
                                <requestHeaders>false</requestHeaders>
                                <responseDataOnError>false</responseDataOnError>
                                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                                <assertionsResultsToSave>0</assertionsResultsToSave>
                                <bytes>true</bytes>
                                <sentBytes>true</sentBytes>
                                <url>true</url>
                                <threadCounts>true</threadCounts>
                                <idleTime>true</idleTime>
                                <connectTime>true</connectTime>
                            </value>
                        </objProp>
                        <stringProp name="filename"></stringProp>
                    </ResultCollector>
                    <hashTree/>
                </hashTree>
                <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="SendResultsLog" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                        <name>saveConfig</name>
                        <value class="SampleSaveConfiguration">
                            <time>true</time>
                            <latency>true</latency>
                            <timestamp>true</timestamp>
                            <success>true</success>
                            <label>true</label>
                            <code>true</code>
                            <message>true</message>
                            <threadName>true</threadName>
                            <dataType>true</dataType>
                            <encoding>false</encoding>
                            <assertions>true</assertions>
                            <subresults>true</subresults>
                            <responseData>false</responseData>
                            <samplerData>false</samplerData>
                            <xml>false</xml>
                            <fieldNames>true</fieldNames>
                            <responseHeaders>false</responseHeaders>
                            <requestHeaders>false</requestHeaders>
                            <responseDataOnError>false</responseDataOnError>
                            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                            <assertionsResultsToSave>0</assertionsResultsToSave>
                            <bytes>true</bytes>
                            <sentBytes>true</sentBytes>
                            <url>true</url>
                            <threadCounts>true</threadCounts>
                            <idleTime>true</idleTime>
                            <connectTime>true</connectTime>
                        </value>
                    </objProp>
                    <stringProp name="filename">/tmp/jmeter-requests.log</stringProp>
                </ResultCollector>
                <hashTree/>
                <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="ThroughputTimer" enabled="true">
                    <intProp name="calcMode">2</intProp>
                    <doubleProp>
                        <name>throughput</name>
                        <value>6000.0</value>
                        <savedValue>0.0</savedValue>
                    </doubleProp>
                </ConstantThroughputTimer>
                <hashTree/>
            </hashTree>
        </hashTree>
    </hashTree>
</jmeterTestPlan>
